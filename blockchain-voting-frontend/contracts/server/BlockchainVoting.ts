/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BlockchainVotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "createElection"
      | "electionCounter"
      | "elections"
      | "endElection"
      | "getCandidates"
      | "getElectionDetails"
      | "getPaginatedElections"
      | "getResults"
      | "getVoterProfile"
      | "getVoters"
      | "getVotersWithDetails"
      | "registerMultipleVoters"
      | "registerVoter"
      | "vote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ElectionCreated"
      | "ElectionEnded"
      | "VoteCast"
      | "VoterRegistered"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createElection",
    values: [string, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "electionCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "elections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endElection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getElectionDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaginatedElections",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getResults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterProfile",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotersWithDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMultipleVoters",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVoter",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "elections", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElectionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaginatedElections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getResults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVoterProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVoters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotersWithDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMultipleVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace ElectionCreatedEvent {
  export type InputTuple = [
    electionId: BigNumberish,
    name: string,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    electionId: bigint,
    name: string,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    electionId: bigint;
    name: string;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ElectionEndedEvent {
  export type InputTuple = [electionId: BigNumberish, results: BigNumberish[]];
  export type OutputTuple = [electionId: bigint, results: bigint[]];
  export interface OutputObject {
    electionId: bigint;
    results: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    electionId: BigNumberish,
    voter: AddressLike,
    candidateId: BigNumberish
  ];
  export type OutputTuple = [
    electionId: bigint,
    voter: string,
    candidateId: bigint
  ];
  export interface OutputObject {
    electionId: bigint;
    voter: string;
    candidateId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterRegisteredEvent {
  export type InputTuple = [electionId: BigNumberish, voter: AddressLike];
  export type OutputTuple = [electionId: bigint, voter: string];
  export interface OutputObject {
    electionId: bigint;
    voter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BlockchainVoting extends BaseContract {
  connect(runner?: ContractRunner | null): BlockchainVoting;
  waitForDeployment(): Promise<this>;

  interface: BlockchainVotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  createElection: TypedContractMethod<
    [
      name: string,
      startTime: BigNumberish,
      endTime: BigNumberish,
      candidates: string[]
    ],
    [void],
    "nonpayable"
  >;

  electionCounter: TypedContractMethod<[], [bigint], "view">;

  elections: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean] & {
        id: bigint;
        name: string;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  endElection: TypedContractMethod<
    [electionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCandidates: TypedContractMethod<
    [electionId: BigNumberish],
    [string[]],
    "view"
  >;

  getElectionDetails: TypedContractMethod<
    [electionId: BigNumberish],
    [
      [string, bigint, bigint, boolean, string[], bigint[]] & {
        name: string;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        candidates: string[];
        results: bigint[];
      }
    ],
    "view"
  >;

  getPaginatedElections: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish, filterState: BigNumberish],
    [
      [bigint[], string[], bigint[], bigint[], boolean[]] & {
        ids: bigint[];
        names: string[];
        startTimes: bigint[];
        endTimes: bigint[];
        states: boolean[];
      }
    ],
    "view"
  >;

  getResults: TypedContractMethod<
    [electionId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getVoterProfile: TypedContractMethod<
    [electionId: BigNumberish, voter: AddressLike],
    [[boolean, boolean, bigint]],
    "view"
  >;

  getVoters: TypedContractMethod<
    [electionId: BigNumberish],
    [string[]],
    "view"
  >;

  getVotersWithDetails: TypedContractMethod<
    [electionId: BigNumberish],
    [
      [string[], boolean[], boolean[], bigint[]] & {
        voterAddresses: string[];
        isRegisteredArray: boolean[];
        hasVotedArray: boolean[];
        votesArray: bigint[];
      }
    ],
    "view"
  >;

  registerMultipleVoters: TypedContractMethod<
    [electionId: BigNumberish, voters: AddressLike[]],
    [void],
    "nonpayable"
  >;

  registerVoter: TypedContractMethod<
    [electionId: BigNumberish, voter: AddressLike],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [electionId: BigNumberish, candidateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createElection"
  ): TypedContractMethod<
    [
      name: string,
      startTime: BigNumberish,
      endTime: BigNumberish,
      candidates: string[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "electionCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "elections"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean] & {
        id: bigint;
        name: string;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "endElection"
  ): TypedContractMethod<[electionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCandidates"
  ): TypedContractMethod<[electionId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getElectionDetails"
  ): TypedContractMethod<
    [electionId: BigNumberish],
    [
      [string, bigint, bigint, boolean, string[], bigint[]] & {
        name: string;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        candidates: string[];
        results: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPaginatedElections"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish, filterState: BigNumberish],
    [
      [bigint[], string[], bigint[], bigint[], boolean[]] & {
        ids: bigint[];
        names: string[];
        startTimes: bigint[];
        endTimes: bigint[];
        states: boolean[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getResults"
  ): TypedContractMethod<[electionId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getVoterProfile"
  ): TypedContractMethod<
    [electionId: BigNumberish, voter: AddressLike],
    [[boolean, boolean, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoters"
  ): TypedContractMethod<[electionId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVotersWithDetails"
  ): TypedContractMethod<
    [electionId: BigNumberish],
    [
      [string[], boolean[], boolean[], bigint[]] & {
        voterAddresses: string[];
        isRegisteredArray: boolean[];
        hasVotedArray: boolean[];
        votesArray: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerMultipleVoters"
  ): TypedContractMethod<
    [electionId: BigNumberish, voters: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerVoter"
  ): TypedContractMethod<
    [electionId: BigNumberish, voter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [electionId: BigNumberish, candidateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ElectionCreated"
  ): TypedContractEvent<
    ElectionCreatedEvent.InputTuple,
    ElectionCreatedEvent.OutputTuple,
    ElectionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ElectionEnded"
  ): TypedContractEvent<
    ElectionEndedEvent.InputTuple,
    ElectionEndedEvent.OutputTuple,
    ElectionEndedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VoterRegistered"
  ): TypedContractEvent<
    VoterRegisteredEvent.InputTuple,
    VoterRegisteredEvent.OutputTuple,
    VoterRegisteredEvent.OutputObject
  >;

  filters: {
    "ElectionCreated(uint256,string,uint256,uint256)": TypedContractEvent<
      ElectionCreatedEvent.InputTuple,
      ElectionCreatedEvent.OutputTuple,
      ElectionCreatedEvent.OutputObject
    >;
    ElectionCreated: TypedContractEvent<
      ElectionCreatedEvent.InputTuple,
      ElectionCreatedEvent.OutputTuple,
      ElectionCreatedEvent.OutputObject
    >;

    "ElectionEnded(uint256,uint256[])": TypedContractEvent<
      ElectionEndedEvent.InputTuple,
      ElectionEndedEvent.OutputTuple,
      ElectionEndedEvent.OutputObject
    >;
    ElectionEnded: TypedContractEvent<
      ElectionEndedEvent.InputTuple,
      ElectionEndedEvent.OutputTuple,
      ElectionEndedEvent.OutputObject
    >;

    "VoteCast(uint256,address,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VoterRegistered(uint256,address)": TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
    VoterRegistered: TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
  };
}
